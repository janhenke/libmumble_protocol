name: CMake matrix build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    env:
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        toolchain: [ GNU, LLVM, MSVC ]
        build_type: [ Debug, Release ]
        include:
          - os: macos-latest
            toolchain: LLVM
            c_compiler: $(brew --prefix llvm@15)/bin/clang
            cpp_compiler: $(brew --prefix llvm@15)/bin/clang++
          - os: ubuntu-latest
            toolchain: GNU
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-latest
            toolchain: LLVM
            c_compiler: clang-17
            cpp_compiler: clang++-17
          - os: windows-latest
            toolchain: LLVM
            msvc_toolchain: ClangCL
          - os: windows-latest
            toolchain: MSVC
            msvc_toolchain: v143
        exclude:
          - os: macos-latest
            toolchain: GNU
          - os: macos-latest
            toolchain: MSVC
          - os: ubuntu-latest
            toolchain: MSVC
          - os: windows-latest
            toolchain: GNU

    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Update Ubuntu images to Clang 17
        # Workaround until https://github.com/actions/runner-images/issues/8659 is resolved
        if: runner.os == 'Linux'
        run: |
          sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
          sudo apt-get -qq update
          sudo apt-get -qq install clang-17

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
          -S ${{ github.workspace }}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -G "Visual Studio 17 2022"
          -T ${{ matrix.msvc_toolchain }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake"
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
