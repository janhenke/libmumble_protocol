include(GenerateExportHeader)
# check for LTO support in the compiler
include(CheckIPOSupported)
check_ipo_supported(RESULT lto_supported OUTPUT lto_error)

# mumble_packet
find_package(Protobuf REQUIRED)
protobuf_generate_cpp(MUMBLE_PROTOBUF_SOURCE_FILES MUMBLE_PROTOBUF_HEADER_FILES Mumble.proto)
add_library(mumble_packet
        STATIC
        ${MUMBLE_PROTOBUF_SOURCE_FILES} ${MUMBLE_PROTOBUF_HEADER_FILES}
        packet/tcp_packet.cpp packet/tcp_packet.hpp)
set_target_properties(mumble_packet PROPERTIES VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
generate_export_header(mumble_packet)
target_include_directories(mumble_packet
        PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}
        PUBLIC ${CMAKE_CURRENT_BINARY_DIR}
        PUBLIC ${Protobuf_INCLUDE_DIRS})
target_link_libraries(mumble_packet
        PUBLIC ${CMAKE_THREAD_LIBS_INIT}
        PUBLIC protobuf::libprotobuf)

# libmumble_client
find_package(Boost ${BOOST_REQUIRED_VERSION} REQUIRED COMPONENTS log log_setup)
find_package(Threads REQUIRED)
find_package(OpenSSL)

find_path(OPUS_INCLUDE_DIR NAMES opus/opus.h)
find_library(OPUS_LIBRARY NAMES opus)

add_library(mumble_client
        SHARED
        protocol/voice.cpp protocol/voice.hpp
        core.cpp core.hpp)
set_target_properties(mumble_client PROPERTIES
        VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}"
        SOVERSION 0)
generate_export_header(mumble_client)
target_include_directories(mumble_client
        PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}
        PUBLIC ${CMAKE_CURRENT_BINARY_DIR}
        PUBLIC ${OPUS_INCLUDE_DIR})
target_compile_definitions(mumble_client
        PUBLIC BOOST_LOG_DYN_LINK
        PUBLIC BOOST_ASIO_NO_DEPRECATED
        PUBLIC BOOST_ASIO_DISABLE_CONCEPTS)
# enable extra warnings for our code
target_compile_options(mumble_client PRIVATE ${COMPILER_WARNING_OPTIONS})
target_link_libraries(mumble_client
        PUBLIC mumble_packet
        PUBLIC ${CMAKE_THREAD_LIBS_INIT}
        PUBLIC OpenSSL::SSL
        PRIVATE OpenSSL::Crypto
        PRIVATE Boost::boost
        PRIVATE Boost::log
        PRIVATE ${OPUS_LIBRARY})
if (lto_supported)
    set_property(TARGET mumble_client PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
endif ()